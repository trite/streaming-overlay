"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""All input for the create `RelationPrereq` mutation."""
input CreateRelationPrereqInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RelationPrereq` to be created by this mutation."""
  relationPrereq: RelationPrereqInput!
}

"""The output of our create `RelationPrereq` mutation."""
type CreateRelationPrereqPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RelationPrereq` that was created by this mutation."""
  relationPrereq: RelationPrereq

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Task` that is related to this `RelationPrereq`."""
  taskByTaskId: Task

  """Reads a single `Task` that is related to this `RelationPrereq`."""
  taskByPrereqTaskId: Task

  """An edge for our `RelationPrereq`. May be used by Relay 1."""
  relationPrereqEdge(
    """The method to use when ordering `RelationPrereq`."""
    orderBy: [RelationPrereqsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationPrereqsEdge
}

"""All input for the create `RelationSubtask` mutation."""
input CreateRelationSubtaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RelationSubtask` to be created by this mutation."""
  relationSubtask: RelationSubtaskInput!
}

"""The output of our create `RelationSubtask` mutation."""
type CreateRelationSubtaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RelationSubtask` that was created by this mutation."""
  relationSubtask: RelationSubtask

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Task` that is related to this `RelationSubtask`."""
  taskByTaskId: Task

  """Reads a single `Task` that is related to this `RelationSubtask`."""
  taskBySubtaskTaskId: Task

  """An edge for our `RelationSubtask`. May be used by Relay 1."""
  relationSubtaskEdge(
    """The method to use when ordering `RelationSubtask`."""
    orderBy: [RelationSubtasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationSubtasksEdge
}

"""All input for the create `Task` mutation."""
input CreateTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Task` to be created by this mutation."""
  task: TaskInput!
}

"""The output of our create `Task` mutation."""
type CreateTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Task` that was created by this mutation."""
  task: Task

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteRelationPrereqById` mutation."""
input DeleteRelationPrereqByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteRelationPrereq` mutation."""
input DeleteRelationPrereqInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RelationPrereq` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `RelationPrereq` mutation."""
type DeleteRelationPrereqPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RelationPrereq` that was deleted by this mutation."""
  relationPrereq: RelationPrereq
  deletedRelationPrereqId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Task` that is related to this `RelationPrereq`."""
  taskByTaskId: Task

  """Reads a single `Task` that is related to this `RelationPrereq`."""
  taskByPrereqTaskId: Task

  """An edge for our `RelationPrereq`. May be used by Relay 1."""
  relationPrereqEdge(
    """The method to use when ordering `RelationPrereq`."""
    orderBy: [RelationPrereqsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationPrereqsEdge
}

"""All input for the `deleteRelationSubtaskById` mutation."""
input DeleteRelationSubtaskByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteRelationSubtask` mutation."""
input DeleteRelationSubtaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RelationSubtask` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `RelationSubtask` mutation."""
type DeleteRelationSubtaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RelationSubtask` that was deleted by this mutation."""
  relationSubtask: RelationSubtask
  deletedRelationSubtaskId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Task` that is related to this `RelationSubtask`."""
  taskByTaskId: Task

  """Reads a single `Task` that is related to this `RelationSubtask`."""
  taskBySubtaskTaskId: Task

  """An edge for our `RelationSubtask`. May be used by Relay 1."""
  relationSubtaskEdge(
    """The method to use when ordering `RelationSubtask`."""
    orderBy: [RelationSubtasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationSubtasksEdge
}

"""All input for the `deleteTaskById` mutation."""
input DeleteTaskByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteTask` mutation."""
input DeleteTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Task` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Task` mutation."""
type DeleteTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Task` that was deleted by this mutation."""
  task: Task
  deletedTaskId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `RelationPrereq`."""
  createRelationPrereq(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRelationPrereqInput!
  ): CreateRelationPrereqPayload

  """Creates a single `RelationSubtask`."""
  createRelationSubtask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRelationSubtaskInput!
  ): CreateRelationSubtaskPayload

  """Creates a single `Task`."""
  createTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTaskInput!
  ): CreateTaskPayload

  """
  Updates a single `RelationPrereq` using its globally unique id and a patch.
  """
  updateRelationPrereq(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRelationPrereqInput!
  ): UpdateRelationPrereqPayload

  """Updates a single `RelationPrereq` using a unique key and a patch."""
  updateRelationPrereqById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRelationPrereqByIdInput!
  ): UpdateRelationPrereqPayload

  """
  Updates a single `RelationSubtask` using its globally unique id and a patch.
  """
  updateRelationSubtask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRelationSubtaskInput!
  ): UpdateRelationSubtaskPayload

  """Updates a single `RelationSubtask` using a unique key and a patch."""
  updateRelationSubtaskById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRelationSubtaskByIdInput!
  ): UpdateRelationSubtaskPayload

  """Updates a single `Task` using its globally unique id and a patch."""
  updateTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaskInput!
  ): UpdateTaskPayload

  """Updates a single `Task` using a unique key and a patch."""
  updateTaskById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaskByIdInput!
  ): UpdateTaskPayload

  """Deletes a single `RelationPrereq` using its globally unique id."""
  deleteRelationPrereq(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRelationPrereqInput!
  ): DeleteRelationPrereqPayload

  """Deletes a single `RelationPrereq` using a unique key."""
  deleteRelationPrereqById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRelationPrereqByIdInput!
  ): DeleteRelationPrereqPayload

  """Deletes a single `RelationSubtask` using its globally unique id."""
  deleteRelationSubtask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRelationSubtaskInput!
  ): DeleteRelationSubtaskPayload

  """Deletes a single `RelationSubtask` using a unique key."""
  deleteRelationSubtaskById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRelationSubtaskByIdInput!
  ): DeleteRelationSubtaskPayload

  """Deletes a single `Task` using its globally unique id."""
  deleteTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaskInput!
  ): DeleteTaskPayload

  """Deletes a single `Task` using a unique key."""
  deleteTaskById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaskByIdInput!
  ): DeleteTaskPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `RelationPrereq`."""
  allRelationPrereqs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RelationPrereq`."""
    orderBy: [RelationPrereqsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationPrereqCondition
  ): RelationPrereqsConnection

  """Reads and enables pagination through a set of `RelationSubtask`."""
  allRelationSubtasks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RelationSubtask`."""
    orderBy: [RelationSubtasksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationSubtaskCondition
  ): RelationSubtasksConnection

  """Reads and enables pagination through a set of `Task`."""
  allTasks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TaskCondition
  ): TasksConnection
  relationPrereqById(id: Int!): RelationPrereq
  relationSubtaskById(id: Int!): RelationSubtask
  taskById(id: Int!): Task

  """Reads a single `RelationPrereq` using its globally unique `ID`."""
  relationPrereq(
    """
    The globally unique `ID` to be used in selecting a single `RelationPrereq`.
    """
    nodeId: ID!
  ): RelationPrereq

  """Reads a single `RelationSubtask` using its globally unique `ID`."""
  relationSubtask(
    """
    The globally unique `ID` to be used in selecting a single `RelationSubtask`.
    """
    nodeId: ID!
  ): RelationSubtask

  """Reads a single `Task` using its globally unique `ID`."""
  task(
    """The globally unique `ID` to be used in selecting a single `Task`."""
    nodeId: ID!
  ): Task
}

type RelationPrereq implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  taskId: Int!
  prereqTaskId: Int!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Task` that is related to this `RelationPrereq`."""
  taskByTaskId: Task

  """Reads a single `Task` that is related to this `RelationPrereq`."""
  taskByPrereqTaskId: Task
}

"""
A condition to be used against `RelationPrereq` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RelationPrereqCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `taskId` field."""
  taskId: Int

  """Checks for equality with the object’s `prereqTaskId` field."""
  prereqTaskId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `RelationPrereq`"""
input RelationPrereqInput {
  id: Int
  taskId: Int!
  prereqTaskId: Int!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `RelationPrereq`. Fields that are set will be updated.
"""
input RelationPrereqPatch {
  id: Int
  taskId: Int
  prereqTaskId: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `RelationPrereq` values."""
type RelationPrereqsConnection {
  """A list of `RelationPrereq` objects."""
  nodes: [RelationPrereq]!

  """
  A list of edges which contains the `RelationPrereq` and cursor to aid in pagination.
  """
  edges: [RelationPrereqsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RelationPrereq` you could get from the connection."""
  totalCount: Int!
}

"""A `RelationPrereq` edge in the connection."""
type RelationPrereqsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RelationPrereq` at the end of the edge."""
  node: RelationPrereq
}

"""Methods to use when ordering `RelationPrereq`."""
enum RelationPrereqsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TASK_ID_ASC
  TASK_ID_DESC
  PREREQ_TASK_ID_ASC
  PREREQ_TASK_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type RelationSubtask implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  taskId: Int!
  subtaskTaskId: Int!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Task` that is related to this `RelationSubtask`."""
  taskByTaskId: Task

  """Reads a single `Task` that is related to this `RelationSubtask`."""
  taskBySubtaskTaskId: Task
}

"""
A condition to be used against `RelationSubtask` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RelationSubtaskCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `taskId` field."""
  taskId: Int

  """Checks for equality with the object’s `subtaskTaskId` field."""
  subtaskTaskId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `RelationSubtask`"""
input RelationSubtaskInput {
  id: Int
  taskId: Int!
  subtaskTaskId: Int!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `RelationSubtask`. Fields that are set will be updated.
"""
input RelationSubtaskPatch {
  id: Int
  taskId: Int
  subtaskTaskId: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `RelationSubtask` values."""
type RelationSubtasksConnection {
  """A list of `RelationSubtask` objects."""
  nodes: [RelationSubtask]!

  """
  A list of edges which contains the `RelationSubtask` and cursor to aid in pagination.
  """
  edges: [RelationSubtasksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RelationSubtask` you could get from the connection.
  """
  totalCount: Int!
}

"""A `RelationSubtask` edge in the connection."""
type RelationSubtasksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RelationSubtask` at the end of the edge."""
  node: RelationSubtask
}

"""Methods to use when ordering `RelationSubtask`."""
enum RelationSubtasksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TASK_ID_ASC
  TASK_ID_DESC
  SUBTASK_TASK_ID_ASC
  SUBTASK_TASK_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Task implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  toDo: String!
  status: TaskStatus!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `RelationSubtask`."""
  subtasks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RelationSubtask`."""
    orderBy: [RelationSubtasksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationSubtaskCondition
  ): RelationSubtasksConnection!

  """Reads and enables pagination through a set of `RelationSubtask`."""
  subtaskOf(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RelationSubtask`."""
    orderBy: [RelationSubtasksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationSubtaskCondition
  ): RelationSubtasksConnection!

  """Reads and enables pagination through a set of `RelationPrereq`."""
  prereqs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RelationPrereq`."""
    orderBy: [RelationPrereqsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationPrereqCondition
  ): RelationPrereqsConnection!

  """Reads and enables pagination through a set of `RelationPrereq`."""
  prereqOf(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RelationPrereq`."""
    orderBy: [RelationPrereqsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationPrereqCondition
  ): RelationPrereqsConnection!
  hasPrereqs: String
  hasSubtasks: String
  isPrereq: String
  isSubtask: String
}

"""
A condition to be used against `Task` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TaskCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `toDo` field."""
  toDo: String

  """Checks for equality with the object’s `status` field."""
  status: TaskStatus

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Task`"""
input TaskInput {
  id: Int
  toDo: String!
  status: TaskStatus
  createdAt: Datetime
  updatedAt: Datetime
}

"""Represents an update to a `Task`. Fields that are set will be updated."""
input TaskPatch {
  id: Int
  toDo: String
  status: TaskStatus
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `Task` values."""
type TasksConnection {
  """A list of `Task` objects."""
  nodes: [Task]!

  """
  A list of edges which contains the `Task` and cursor to aid in pagination.
  """
  edges: [TasksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection."""
type TasksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Task` at the end of the edge."""
  node: Task
}

"""Methods to use when ordering `Task`."""
enum TasksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TO_DO_ASC
  TO_DO_DESC
  STATUS_ASC
  STATUS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum TaskStatus {
  TODO
  BLOCKED
  IN_PROGRESS
  DONE
}

"""All input for the `updateRelationPrereqById` mutation."""
input UpdateRelationPrereqByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RelationPrereq` being updated.
  """
  relationPrereqPatch: RelationPrereqPatch!
  id: Int!
}

"""All input for the `updateRelationPrereq` mutation."""
input UpdateRelationPrereqInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RelationPrereq` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RelationPrereq` being updated.
  """
  relationPrereqPatch: RelationPrereqPatch!
}

"""The output of our update `RelationPrereq` mutation."""
type UpdateRelationPrereqPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RelationPrereq` that was updated by this mutation."""
  relationPrereq: RelationPrereq

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Task` that is related to this `RelationPrereq`."""
  taskByTaskId: Task

  """Reads a single `Task` that is related to this `RelationPrereq`."""
  taskByPrereqTaskId: Task

  """An edge for our `RelationPrereq`. May be used by Relay 1."""
  relationPrereqEdge(
    """The method to use when ordering `RelationPrereq`."""
    orderBy: [RelationPrereqsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationPrereqsEdge
}

"""All input for the `updateRelationSubtaskById` mutation."""
input UpdateRelationSubtaskByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RelationSubtask` being updated.
  """
  relationSubtaskPatch: RelationSubtaskPatch!
  id: Int!
}

"""All input for the `updateRelationSubtask` mutation."""
input UpdateRelationSubtaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RelationSubtask` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RelationSubtask` being updated.
  """
  relationSubtaskPatch: RelationSubtaskPatch!
}

"""The output of our update `RelationSubtask` mutation."""
type UpdateRelationSubtaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RelationSubtask` that was updated by this mutation."""
  relationSubtask: RelationSubtask

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Task` that is related to this `RelationSubtask`."""
  taskByTaskId: Task

  """Reads a single `Task` that is related to this `RelationSubtask`."""
  taskBySubtaskTaskId: Task

  """An edge for our `RelationSubtask`. May be used by Relay 1."""
  relationSubtaskEdge(
    """The method to use when ordering `RelationSubtask`."""
    orderBy: [RelationSubtasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationSubtasksEdge
}

"""All input for the `updateTaskById` mutation."""
input UpdateTaskByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Task` being updated.
  """
  taskPatch: TaskPatch!
  id: Int!
}

"""All input for the `updateTask` mutation."""
input UpdateTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Task` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Task` being updated.
  """
  taskPatch: TaskPatch!
}

"""The output of our update `Task` mutation."""
type UpdateTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Task` that was updated by this mutation."""
  task: Task

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksEdge
}

