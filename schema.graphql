"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""All input for the create `MarkdownChunk` mutation."""
input CreateMarkdownChunkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MarkdownChunk` to be created by this mutation."""
  markdownChunk: MarkdownChunkInput!
}

"""The output of our create `MarkdownChunk` mutation."""
type CreateMarkdownChunkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MarkdownChunk` that was created by this mutation."""
  markdownChunk: MarkdownChunk

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MarkdownChunk`. May be used by Relay 1."""
  markdownChunkEdge(
    """The method to use when ordering `MarkdownChunk`."""
    orderBy: [MarkdownChunksOrderBy!] = [PRIMARY_KEY_ASC]
  ): MarkdownChunksEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteMarkdownChunkByChunkName` mutation."""
input DeleteMarkdownChunkByChunkNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  chunkName: String!
}

"""All input for the `deleteMarkdownChunkById` mutation."""
input DeleteMarkdownChunkByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteMarkdownChunk` mutation."""
input DeleteMarkdownChunkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MarkdownChunk` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `MarkdownChunk` mutation."""
type DeleteMarkdownChunkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MarkdownChunk` that was deleted by this mutation."""
  markdownChunk: MarkdownChunk
  deletedMarkdownChunkId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MarkdownChunk`. May be used by Relay 1."""
  markdownChunkEdge(
    """The method to use when ordering `MarkdownChunk`."""
    orderBy: [MarkdownChunksOrderBy!] = [PRIMARY_KEY_ASC]
  ): MarkdownChunksEdge
}

type MarkdownChunk implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  chunkName: String!
  markdown: String!
  createdAt: Datetime!
  updatedAt: Datetime!
}

"""
A condition to be used against `MarkdownChunk` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MarkdownChunkCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `chunkName` field."""
  chunkName: String

  """Checks for equality with the object’s `markdown` field."""
  markdown: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `MarkdownChunk`"""
input MarkdownChunkInput {
  id: Int
  chunkName: String!
  markdown: String!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `MarkdownChunk`. Fields that are set will be updated.
"""
input MarkdownChunkPatch {
  id: Int
  chunkName: String
  markdown: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `MarkdownChunk` values."""
type MarkdownChunksConnection {
  """A list of `MarkdownChunk` objects."""
  nodes: [MarkdownChunk]!

  """
  A list of edges which contains the `MarkdownChunk` and cursor to aid in pagination.
  """
  edges: [MarkdownChunksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MarkdownChunk` you could get from the connection."""
  totalCount: Int!
}

"""A `MarkdownChunk` edge in the connection."""
type MarkdownChunksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MarkdownChunk` at the end of the edge."""
  node: MarkdownChunk
}

"""Methods to use when ordering `MarkdownChunk`."""
enum MarkdownChunksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CHUNK_NAME_ASC
  CHUNK_NAME_DESC
  MARKDOWN_ASC
  MARKDOWN_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `MarkdownChunk`."""
  createMarkdownChunk(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMarkdownChunkInput!
  ): CreateMarkdownChunkPayload

  """
  Updates a single `MarkdownChunk` using its globally unique id and a patch.
  """
  updateMarkdownChunk(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMarkdownChunkInput!
  ): UpdateMarkdownChunkPayload

  """Updates a single `MarkdownChunk` using a unique key and a patch."""
  updateMarkdownChunkById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMarkdownChunkByIdInput!
  ): UpdateMarkdownChunkPayload

  """Updates a single `MarkdownChunk` using a unique key and a patch."""
  updateMarkdownChunkByChunkName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMarkdownChunkByChunkNameInput!
  ): UpdateMarkdownChunkPayload

  """Deletes a single `MarkdownChunk` using its globally unique id."""
  deleteMarkdownChunk(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMarkdownChunkInput!
  ): DeleteMarkdownChunkPayload

  """Deletes a single `MarkdownChunk` using a unique key."""
  deleteMarkdownChunkById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMarkdownChunkByIdInput!
  ): DeleteMarkdownChunkPayload

  """Deletes a single `MarkdownChunk` using a unique key."""
  deleteMarkdownChunkByChunkName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMarkdownChunkByChunkNameInput!
  ): DeleteMarkdownChunkPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `MarkdownChunk`."""
  allMarkdownChunks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MarkdownChunk`."""
    orderBy: [MarkdownChunksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MarkdownChunkCondition
  ): MarkdownChunksConnection
  markdownChunkById(id: Int!): MarkdownChunk
  markdownChunkByChunkName(chunkName: String!): MarkdownChunk

  """Reads a single `MarkdownChunk` using its globally unique `ID`."""
  markdownChunk(
    """
    The globally unique `ID` to be used in selecting a single `MarkdownChunk`.
    """
    nodeId: ID!
  ): MarkdownChunk
}

"""All input for the `updateMarkdownChunkByChunkName` mutation."""
input UpdateMarkdownChunkByChunkNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MarkdownChunk` being updated.
  """
  markdownChunkPatch: MarkdownChunkPatch!
  chunkName: String!
}

"""All input for the `updateMarkdownChunkById` mutation."""
input UpdateMarkdownChunkByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MarkdownChunk` being updated.
  """
  markdownChunkPatch: MarkdownChunkPatch!
  id: Int!
}

"""All input for the `updateMarkdownChunk` mutation."""
input UpdateMarkdownChunkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MarkdownChunk` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MarkdownChunk` being updated.
  """
  markdownChunkPatch: MarkdownChunkPatch!
}

"""The output of our update `MarkdownChunk` mutation."""
type UpdateMarkdownChunkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MarkdownChunk` that was updated by this mutation."""
  markdownChunk: MarkdownChunk

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MarkdownChunk`. May be used by Relay 1."""
  markdownChunkEdge(
    """The method to use when ordering `MarkdownChunk`."""
    orderBy: [MarkdownChunksOrderBy!] = [PRIMARY_KEY_ASC]
  ): MarkdownChunksEdge
}

